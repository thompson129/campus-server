generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model advisor {
  id               Int            @id @default(autoincrement())
  emp_id           String         @db.VarChar(20)
  program_batch_id Int?
  start_time       DateTime?      @db.Timestamp(6)
  end_time         DateTime?      @db.Timestamp(6)
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  updated_at       DateTime       @default(now()) @db.Timestamp(6)
  employee         employee       @relation(fields: [emp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  program_batch    program_batch? @relation(fields: [program_batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model building {
  id           Int     @id @default(autoincrement())
  campus_id    Int?
  name         String  @db.VarChar(100)
  building_img String? @db.VarChar(255)
  phone        String? @db.VarChar(20)
  fax          String? @db.VarChar(20)
  location     String? @db.VarChar(255)
  campus       campus? @relation(fields: [campus_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  floor        floor[]
}

model campus {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  map_path     String?        @db.VarChar(255)
  start_year   Int
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  building     building[]
  campus_batch campus_batch[]
}

model course {
  code        String            @id @db.VarChar(20)
  program_id  Int
  name        String            @db.VarChar(100)
  description String?
  objective   String?
  credits     Int?
  type        course_type_enum?
  created_at  DateTime          @default(now()) @db.Timestamp(6)
  updated_at  DateTime          @default(now()) @db.Timestamp(6)
  program     program           @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model driver {
  id         Int      @id @default(autoincrement())
  emp_id     String   @db.VarChar(20)
  license_no String   @unique @db.VarChar(50)
  employee   employee @relation(fields: [emp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employee {
  id                String       @id @db.VarChar(20)
  firstname         String       @db.VarChar(50)
  midname           String?      @db.VarChar(50)
  lastname          String?      @db.VarChar(50)
  phone             String?      @unique @db.VarChar(20)
  address           String?      @db.VarChar(500)
  date_of_birth     DateTime?    @db.Date
  gender            gender_enum?
  identification_no String?      @unique @db.VarChar(20)
  passport_no       String?      @unique @db.VarChar(20)
  user_id           String       @unique @db.Uuid
  faculty_id        Int?
  position          String?      @db.VarChar(50)
  job_title         String?      @db.VarChar(50)
  salary            Int?
  bonus             Int?
  created_at        DateTime     @default(now()) @db.Timestamp(6)
  updated_at        DateTime     @default(now()) @db.Timestamp(6)
  advisor           advisor[]
  driver            driver[]
  faculty           faculty?     @relation(fields: [faculty_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  professor         professor[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model enrollment_detail {
  id              Int                 @id @default(autoincrement())
  head_id         Int
  student_id      String?             @db.VarChar(20)
  section_id      Int
  status          enroll_status_enum? @default(Active)
  progress        Decimal?            @db.Decimal(5, 2)
  grade_id        Int?
  created_at      DateTime            @default(now()) @db.Timestamp(6)
  updated_at      DateTime            @default(now()) @db.Timestamp(6)
  grade           grade?              @relation(fields: [grade_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enrollment_head enrollment_head     @relation(fields: [head_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  section         section             @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student         student?            @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model enrollment_head {
  id                Int                  @id @default(autoincrement())
  student_id        String               @db.VarChar(20)
  semester_id       Int
  invoice_id        String?              @db.Uuid
  status            payment_status_enum? @default(Unpaid)
  gpa               Decimal?             @db.Decimal(4, 2)
  created_at        DateTime             @default(now()) @db.Timestamp(6)
  updated_at        DateTime             @default(now()) @db.Timestamp(6)
  enrollment_detail enrollment_detail[]
  invoice           invoice?             @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  semester          semester             @relation(fields: [semester_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student           student              @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model faculty {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(100)
  employee employee[]
  program  program[]
}

model floor {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  building_id Int
  building    building @relation(fields: [building_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room        room[]
}

model invoice {
  id              String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String               @db.Uuid
  issued_by       String?              @db.VarChar(50)
  issued_date     DateTime?            @db.Timestamp(6)
  due_date        DateTime?            @db.Timestamp(6)
  paid_date       DateTime?            @db.Timestamp(6)
  amount          Decimal?             @db.Decimal(10, 2)
  title           String?              @db.VarChar(100)
  status          payment_status_enum? @default(Unpaid)
  created_at      DateTime             @default(now()) @db.Timestamp(6)
  updated_at      DateTime             @default(now()) @db.Timestamp(6)
  enrollment_head enrollment_head[]
  user            user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model professor {
  id         Int      @id @default(autoincrement())
  emp_id     String   @db.VarChar(20)
  section_id Int
  employee   employee @relation(fields: [emp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  section    section  @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model program {
  id           Int                   @id @default(autoincrement())
  faculty_id   Int?
  name         String                @db.VarChar(100)
  price        Int?
  degree_level education_level_enum?
  duration     Int?
  prefix       String                @unique @db.VarChar(3)
  no_of_course Int?                  @default(1)
  created_at   DateTime              @default(now()) @db.Timestamp(6)
  updated_at   DateTime              @default(now()) @db.Timestamp(6)
  course       course[]
  degree       degree[]
  faculty      faculty?              @relation(fields: [faculty_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model room {
  id       Int       @id @default(autoincrement())
  floor_id Int
  name     String    @db.VarChar(100)
  capacity Int?
  location String?   @db.VarChar(255)
  floor    floor     @relation(fields: [floor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  section  section[]
}

model section {
  id                Int                 @id @default(autoincrement())
  course_code       String              @db.VarChar(10)
  name              String?             @db.VarChar(100)
  room_id           Int?
  semester_id       Int
  day               weekday_enum?
  start_time        DateTime?           @db.Time(6)
  end_time          DateTime?           @db.Time(6)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  professor         professor[]
  room              room?               @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  semester          semester            @relation(fields: [semester_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enrollment_detail enrollment_detail[]
}

model semester {
  id              Int               @id @default(autoincrement())
  name            String?           @db.VarChar(20)
  start_date      DateTime?         @db.Date
  end_date        DateTime?         @db.Date
  enrollment_head enrollment_head[]
  section         section[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model student {
  id                String              @id @db.VarChar(20)
  firstname         String              @db.VarChar(50)
  midname           String?             @db.VarChar(50)
  lastname          String?             @db.VarChar(50)
  phone             String?             @unique @db.VarChar(20)
  address           String?             @db.VarChar(500)
  date_of_birth     DateTime?           @db.Date
  gender            gender_enum?
  identification_no String?             @unique @db.VarChar(20)
  passport_no       String?             @unique @db.VarChar(20)
  user_id           String              @unique @db.Uuid
  degree_id         Int
  campus_batch_id   Int?
  program_batch_id  Int?
  gpax              Decimal?            @db.Decimal(4, 2)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  enrollment_detail enrollment_detail[]
  enrollment_head   enrollment_head[]
  campus_batch      campus_batch?       @relation(fields: [campus_batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  degree            degree              @relation(fields: [degree_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  program_batch     program_batch?      @relation(fields: [program_batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campus_email   String    @unique @db.VarChar(100)
  personal_email String    @unique @db.VarChar(100)
  password       String    @db.VarChar(255)
  role           role_enum
  is_activated   Boolean   @default(false)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  employee       employee?
  invoice        invoice[]
  student        student?
}

model grade {
  id                Int                 @id @default(autoincrement())
  grade_letter      String              @db.VarChar(2)
  grade_point       Decimal             @db.Decimal(3, 2)
  grade_info        grade_info_enum?
  enrollment_detail enrollment_detail[]
}

model campus_batch {
  id            Int             @id @default(autoincrement())
  batch_no      Int?
  campus_id     Int
  year          Int             @unique
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  campus        campus          @relation(fields: [campus_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  program_batch program_batch[]
  student       student[]
}

model degree {
  id            Int                   @id @default(autoincrement())
  program_id    Int
  name          String                @db.VarChar(100)
  degree_level  education_level_enum?
  start_year    Int
  created_at    DateTime              @default(now()) @db.Timestamp(6)
  updated_at    DateTime              @default(now()) @db.Timestamp(6)
  program       program               @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  program_batch program_batch[]
  student       student[]
}

model program_batch {
  id              Int          @id @default(autoincrement())
  batch_no        Int?
  degree_id       Int
  campus_batch_id Int
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  advisor         advisor[]
  campus_batch    campus_batch @relation(fields: [campus_batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  degree          degree       @relation(fields: [degree_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student         student[]
}

enum attendance_status_enum {
  Present
  Absent
  Late
  Excuse
}

enum course_type_enum {
  General_Core  @map("General Core")
  Specific
  Free_Elective @map("Free Elective")
}

enum education_level_enum {
  Bachelor_Degree @map("Bachelor Degree")
  Master_Degree   @map("Master Degree")
  Doctoral_Degree @map("Doctoral Degree")
}

enum enroll_status_enum {
  Active
  Withdraw
  Complete
}

enum gender_enum {
  Male
  Female
}

enum payment_status_enum {
  Unpaid
  Paid
  Cancelled
}

enum priority_enum {
  High
  Medium
  Low
}

enum role_enum {
  Student
  Professor
  Management
  Staff
  Driver
}

enum weekday_enum {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum grade_info_enum {
  Excellent
  Very_Good                 @map("Very Good")
  Good
  Fairly_Good               @map("Fairly Good")
  Satisfactory
  Somewhat_Satisfactory     @map("Somewhat Satisfactory")
  Passing_but_Below_Average @map("Passing but Below Average")
  Fail
  Unsatisfactory
  Withdraw
  Failure_due_to_Absence    @map("Failure due to Absence")
}